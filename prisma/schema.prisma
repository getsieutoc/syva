datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

enum Role {
  ADMIN
  MEMBER
  CANDIDATE
}

enum Employment {
  CONTRACTOR
  FULLTIME
  INTERN
  PARTTIME
  OTHER
}

enum AnalyzeStatus {
  QUEUED
  PROCESSING
  DONE
  ERROR
}

model Account {
  id                       String  @id @default(uuid())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(MEMBER)

  accounts   Account[]
  sessions   Session[]
  jobs       Job[]
  interviews Interview[]
}

model Job {
  id                     String     @id @default(cuid())
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @default(now()) @updatedAt
  publishedAt            DateTime?
  expiredAt              DateTime?
  name                   String
  description            String
  employment             Employment @default(FULLTIME)
  address                String?
  isRemote               Boolean
  salary                 String?
  responsibilities       String?
  skills                 String?
  qualifications         String?
  educationRequirements  String?
  experienceRequirements String?

  users      User[]
  interviews Interview[]

  @@index([name])
}

model Interview {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  jobId     String
  job       Job        @relation(fields: [jobId], references: [id])
  users     User[]
  links     Link[]
  documents Document[]
}

model Document {
  id     String        @id @default(cuid())
  url    String        @unique
  status AnalyzeStatus @default(QUEUED)

  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([url])
}

model Link {
  id     String        @id @default(cuid())
  url    String        @unique
  status AnalyzeStatus @default(QUEUED)

  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([url])
}
